/*
 *
 * tbti.h
 *
 * Minimal, standalone terminfo(5) processor.
 *
 * This library can be used as a replacement for much of the ncurses terminfo
 * loading and string processing interface. It implements loading and parsing of
 * binary terminfo files as described by term(5).
 *
 * See also:
 *   <https://pubs.opengroup.org/onlinepubs/007908799/xcurses/term.h.html>
 *
 */
#include <stdint.h>

/*
 * Struct tb_termtype is an in-memory version of a terminfo file.
 */
typedef struct tb_termtype {
    char    *term_names;          // names for terminal separated by "|" chars
    int8_t  *bools;               // array of boolean values
    int16_t *nums;                // array of integer values
    int16_t *str_offs;            // array of string offsets
    char    *str_table;           // pointer to string table

    uint16_t num_bools;
    uint16_t num_nums;
    uint16_t num_strings;

    char  *ext_str_table;         // pointer to extended string table
    char  **ext_names;            // corresponding names

    uint16_t ext_bools;           // count extensions to bools
    uint16_t ext_nums;            // count extensions to numbers
    uint16_t ext_strings;         // count extensions to strings
} tb_termtype;

/*
 * Struct tb_terminal holds terminal type information bound to a specific
 * file descriptor.
 */
typedef struct tb_terminal {
    tb_termtype type;             // terminal type description
    short       fd;               // file description being written to
    char *      termname;         // term name used in setupterm
    char *      termdata;         // raw terminfo data loaded from file
} tb_terminal;

/*
 * Read the terminfo database and set up the terminal info structures for the
 * given terminal name, or the TERM environment variable when term is NULL.
 *
 * Simplest invocation uses TERM and standard output:
 *     tb_setupterm(NULL, 1, NULL);
 *
 * Returns 0 on success, -1 if no terminal string is set, -2 if the terminfo
 * file cannot be found.
 *
 * Ncurses counterpart: setupterm().
 */
int tb_setupterm(char *termname, int fd);

/*
 * Read terminfo defined capabilities for the current terminal.
 * Each function takes one of the capability name values defined in this file.
 *
 * Ncurses counterpart: tigetflag(), tigetnum(), tigetstr().
 * */
int   tb_getflag(int cap);
int   tb_getnum(int cap);
char *tb_getstr(int cap);

/*
 * Process terminfo parameterized string.
 * The c argument specifies the number of variadic arguments that follow.
 *
 * Returns a newly allocated processed string unless ps is NULL, in which
 * case NULL is returned. The returned string must be freed with free(3).
 */
char *tb_parmn(char *ps, int c, ...);

/*
 * Load terminfo structures without setting the current global terminal.
 * Useful when building tools that inspect terminfo files.
 */
int tb_loadterm(tb_terminal *term, char *termname, int fd);
void tb_freeterm(tb_terminal *term);

/* Capabilities generated by tools/gencaps.sh on 04 May 2020 09:01:19 PM CDT */

// Boolean Capabilities
#define tb_bw     0   // cub1 wraps from column 0 to last column
#define tb_am     1   // terminal has automatic margins
#define tb_xsb    2   // beehive (f1=escape, f2=ctrl C)
#define tb_xhp    3   // standout not erased by overwriting (hp)
#define tb_xenl   4   // newline ignored after 80 cols (concept)
#define tb_eo     5   // can erase overstrikes with a blank
#define tb_gn     6   // generic line type
#define tb_hc     7   // hardcopy terminal
#define tb_km     8   // Has a meta key (i.e., sets 8th-bit)
#define tb_hs     9   // has extra status line
#define tb_in     10  // insert mode distinguishes nulls
#define tb_da     11  // display may be retained above the screen
#define tb_db     12  // display may be retained below the screen
#define tb_mir    13  // safe to move while in insert mode
#define tb_msgr   14  // safe to move while in standout mode
#define tb_os     15  // terminal can overstrike
#define tb_eslok  16  // escape can be used on the status line
#define tb_xt     17  // tabs destructive, magic so char (t1061)
#define tb_hz     18  // cannot print ~'s (Hazeltine)
#define tb_ul     19  // underline character overstrikes
#define tb_xon    20  // terminal uses xon/xoff handshaking
#define tb_nxon   21  // padding will not work, xon/xoff required
#define tb_mc5i   22  // printer will not echo on screen
#define tb_chts   23  // cursor is hard to see
#define tb_nrrmc  24  // smcup does not reverse rmcup
#define tb_npc    25  // pad character does not exist
#define tb_ndscr  26  // scrolling region is non-destructive
#define tb_ccc    27  // terminal can re-define existing colors
#define tb_bce    28  // screen erased with background color
#define tb_hls    29  // terminal uses only HLS color notation (Tektronix)
#define tb_xhpa   30  // only positive motion for hpa/mhpa caps
#define tb_crxm   31  // using cr turns off micro mode
#define tb_daisy  32  // printer needs operator to change character set
#define tb_xvpa   33  // only positive motion for vpa/mvpa caps
#define tb_sam    34  // printing in last column causes cr
#define tb_cpix   35  // changing character pitch changes resolution
#define tb_lpix   36  // changing line pitch changes resolution
#define tb_OTbs   37  // uses ^H to move left
#define tb_OTns   38  // crt cannot scroll
#define tb_OTnc   39  // no way to go to start of line
#define tb_OTMT   40  // has meta key
#define tb_OTNL   41  // move down with
#define tb_OTpt   42  // has 8-char tabs invoked with ^I
#define tb_OTxr   43  // return clears the line

// Numeric Capabilities
#define tb_cols    0   // number of columns in a line
#define tb_it      1   // tabs initially every # spaces
#define tb_lines   2   // number of lines on screen or page
#define tb_lm      3   // lines of memory if > line. 0 means varies
#define tb_xmc     4   // number of blank characters left by smso or rmso
#define tb_pb      5   // lowest baud rate where padding needed
#define tb_vt      6   // virtual terminal number (CB/unix)
#define tb_wsl     7   // number of columns in status line
#define tb_nlab    8   // number of labels on screen
#define tb_lh      9   // rows in each label
#define tb_lw      10  // columns in each label
#define tb_ma      11  // maximum combined attributes terminal can handle
#define tb_wnum    12  // maximum number of definable windows
#define tb_colors  13  // maximum number of colors on screen
#define tb_pairs   14  // maximum number of color-pairs on the screen
#define tb_ncv     15  // video attributes that cannot be used with colors
#define tb_bufsz   16  // numbers of bytes buffered before printing
#define tb_spinv   17  // spacing of pins vertically in pins per inch
#define tb_spinh   18  // spacing of dots horizontally in dots per inch
#define tb_maddr   19  // maximum value in micro_..._address
#define tb_mjump   20  // maximum value in parm_..._micro
#define tb_mcs     21  // character step size when in micro mode
#define tb_mls     22  // line step size when in micro mode
#define tb_npins   23  // numbers of pins in print-head
#define tb_orc     24  // horizontal resolution in units per line
#define tb_orl     25  // vertical resolution in units per line
#define tb_orhi    26  // horizontal resolution in units per inch
#define tb_orvi    27  // vertical resolution in units per inch
#define tb_cps     28  // print rate in characters per second
#define tb_widcs   29  // character step size when in double wide mode
#define tb_btns    30  // number of buttons on mouse
#define tb_bitwin  31  // number of passes for each bit-image row
#define tb_bitype  32  // type of bit-image device
#define tb_OTug    33  // number of blanks left by ul
#define tb_OTdC    34  // pad needed for CR
#define tb_OTdN    35  // pad needed for LF
#define tb_OTdB    36  // padding required for ^H
#define tb_OTdT    37  // padding required for ^I
#define tb_OTkn    38  // count of function keys

// String Capabilities
#define tb_cbt       0    // back tab (P)
#define tb_bel       1    // audible signal (bell) (P)
#define tb_cr        2    // carriage return (P*) (P*)
#define tb_csr       3    // change region to line #1 to line #2 (P)
#define tb_tbc       4    // clear all tab stops (P)
#define tb_clear     5    // clear screen and home cursor (P*)
#define tb_el        6    // clear to end of line (P)
#define tb_ed        7    // clear to end of screen (P*)
#define tb_hpa       8    // horizontal position #1, absolute (P)
#define tb_cmdch     9    // terminal settable cmd character in prototype !?
#define tb_cup       10   // move to row #1 columns #2
#define tb_cud1      11   // down one line
#define tb_home      12   // home cursor (if no cup)
#define tb_civis     13   // make cursor invisible
#define tb_cub1      14   // move left one space
#define tb_mrcup     15   // memory relative cursor addressing, move to row #1 columns #2
#define tb_cnorm     16   // make cursor appear normal (undo civis/cvvis)
#define tb_cuf1      17   // non-destructive space (move right one space)
#define tb_ll        18   // last line, first column (if no cup)
#define tb_cuu1      19   // up one line
#define tb_cvvis     20   // make cursor very visible
#define tb_dch1      21   // delete character (P*)
#define tb_dl1       22   // delete line (P*)
#define tb_dsl       23   // disable status line
#define tb_hd        24   // half a line down
#define tb_smacs     25   // start alternate character set (P)
#define tb_blink     26   // turn on blinking
#define tb_bold      27   // turn on bold (extra bright) mode
#define tb_smcup     28   // string to start programs using cup
#define tb_smdc      29   // enter delete mode
#define tb_dim       30   // turn on half-bright mode
#define tb_smir      31   // enter insert mode
#define tb_invis     32   // turn on blank mode (characters invisible)
#define tb_prot      33   // turn on protected mode
#define tb_rev       34   // turn on reverse video mode
#define tb_smso      35   // begin standout mode
#define tb_smul      36   // begin underline mode
#define tb_ech       37   // erase #1 characters (P)
#define tb_rmacs     38   // end alternate character set (P)
#define tb_sgr0      39   // turn off all attributes
#define tb_rmcup     40   // strings to end programs using cup
#define tb_rmdc      41   // end delete mode
#define tb_rmir      42   // exit insert mode
#define tb_rmso      43   // exit standout mode
#define tb_rmul      44   // exit underline mode
#define tb_flash     45   // visible bell (may not move cursor)
#define tb_ff        46   // hardcopy terminal page eject (P*)
#define tb_fsl       47   // return from status line
#define tb_is1       48   // initialization string
#define tb_is2       49   // initialization string
#define tb_is3       50   // initialization string
#define tb_if        51   // name of initialization file
#define tb_ich1      52   // insert character (P)
#define tb_il1       53   // insert line (P*)
#define tb_ip        54   // insert padding after inserted character
#define tb_kbs       55   // backspace key
#define tb_ktbc      56   // clear-all-tabs key
#define tb_kclr      57   // clear-screen or erase key
#define tb_kctab     58   // clear-tab key
#define tb_kdch1     59   // delete-character key
#define tb_kdl1      60   // delete-line key
#define tb_kcud1     61   // down-arrow key
#define tb_krmir     62   // sent by rmir or smir in insert mode
#define tb_kel       63   // clear-to-end-of-line key
#define tb_ked       64   // clear-to-end-of-screen key
#define tb_kf0       65   // F0 function key
#define tb_kf1       66   // F1 function key
#define tb_kf10      67   // F10 function key
#define tb_kf2       68   // F2 function key
#define tb_kf3       69   // F3 function key
#define tb_kf4       70   // F4 function key
#define tb_kf5       71   // F5 function key
#define tb_kf6       72   // F6 function key
#define tb_kf7       73   // F7 function key
#define tb_kf8       74   // F8 function key
#define tb_kf9       75   // F9 function key
#define tb_khome     76   // home key
#define tb_kich1     77   // insert-character key
#define tb_kil1      78   // insert-line key
#define tb_kcub1     79   // left-arrow key
#define tb_kll       80   // lower-left key (home down)
#define tb_knp       81   // next-page key
#define tb_kpp       82   // previous-page key
#define tb_kcuf1     83   // right-arrow key
#define tb_kind      84   // scroll-forward key
#define tb_kri       85   // scroll-backward key
#define tb_khts      86   // set-tab key
#define tb_kcuu1     87   // up-arrow key
#define tb_rmkx      88   // leave 'keyboard_transmit' mode
#define tb_smkx      89   // enter 'keyboard_transmit' mode
#define tb_lf0       90   // label on function key f0 if not f0
#define tb_lf1       91   // label on function key f1 if not f1
#define tb_lf10      92   // label on function key f10 if not f10
#define tb_lf2       93   // label on function key f2 if not f2
#define tb_lf3       94   // label on function key f3 if not f3
#define tb_lf4       95   // label on function key f4 if not f4
#define tb_lf5       96   // label on function key f5 if not f5
#define tb_lf6       97   // label on function key f6 if not f6
#define tb_lf7       98   // label on function key f7 if not f7
#define tb_lf8       99   // label on function key f8 if not f8
#define tb_lf9       100  // label on function key f9 if not f9
#define tb_rmm       101  // turn off meta mode
#define tb_smm       102  // turn on meta mode (8th-bit on)
#define tb_nel       103  // newline (behave like cr followed by lf)
#define tb_pad       104  // padding char (instead of null)
#define tb_dch       105  // delete #1 characters (P*)
#define tb_dl        106  // delete #1 lines (P*)
#define tb_cud       107  // down #1 lines (P*)
#define tb_ich       108  // insert #1 characters (P*)
#define tb_indn      109  // scroll forward #1 lines (P)
#define tb_il        110  // insert #1 lines (P*)
#define tb_cub       111  // move #1 characters to the left (P)
#define tb_cuf       112  // move #1 characters to the right (P*)
#define tb_rin       113  // scroll back #1 lines (P)
#define tb_cuu       114  // up #1 lines (P*)
#define tb_pfkey     115  // program function key #1 to type string #2
#define tb_pfloc     116  // program function key #1 to execute string #2
#define tb_pfx       117  // program function key #1 to transmit string #2
#define tb_mc0       118  // print contents of screen
#define tb_mc4       119  // turn off printer
#define tb_mc5       120  // turn on printer
#define tb_rep       121  // repeat char #1 #2 times (P*)
#define tb_rs1       122  // reset string
#define tb_rs2       123  // reset string
#define tb_rs3       124  // reset string
#define tb_rf        125  // name of reset file
#define tb_rc        126  // restore cursor to position of last save_cursor
#define tb_vpa       127  // vertical position #1 absolute (P)
#define tb_sc        128  // save current cursor position (P)
#define tb_ind       129  // scroll text up (P)
#define tb_ri        130  // scroll text down (P)
#define tb_sgr       131  // define video attributes #1-#9 (PG9)
#define tb_hts       132  // set a tab in every row, current columns
#define tb_wind      133  // current window is lines #1-#2 cols #3-#4
#define tb_ht        134  // tab to next 8-space hardware tab stop
#define tb_tsl       135  // move to status line, column #1
#define tb_uc        136  // underline char and move past it
#define tb_hu        137  // half a line up
#define tb_iprog     138  // path name of program for initialization
#define tb_ka1       139  // upper left of keypad
#define tb_ka3       140  // upper right of keypad
#define tb_kb2       141  // center of keypad
#define tb_kc1       142  // lower left of keypad
#define tb_kc3       143  // lower right of keypad
#define tb_mc5p      144  // turn on printer for #1 bytes
#define tb_rmp       145  // like ip but when in insert mode
#define tb_acsc      146  // graphics charset pairs, based on vt100
#define tb_pln       147  // program label #1 to show string #2
#define tb_kcbt      148  // back-tab key
#define tb_smxon     149  // turn on xon/xoff handshaking
#define tb_rmxon     150  // turn off xon/xoff handshaking
#define tb_smam      151  // turn on automatic margins
#define tb_rmam      152  // turn off automatic margins
#define tb_xonc      153  // XON character
#define tb_xoffc     154  // XOFF character
#define tb_enacs     155  // enable alternate char set
#define tb_smln      156  // turn on soft labels
#define tb_rmln      157  // turn off soft labels
#define tb_kbeg      158  // begin key
#define tb_kcan      159  // cancel key
#define tb_kclo      160  // close key
#define tb_kcmd      161  // command key
#define tb_kcpy      162  // copy key
#define tb_kcrt      163  // create key
#define tb_kend      164  // end key
#define tb_kent      165  // enter/send key
#define tb_kext      166  // exit key
#define tb_kfnd      167  // find key
#define tb_khlp      168  // help key
#define tb_kmrk      169  // mark key
#define tb_kmsg      170  // message key
#define tb_kmov      171  // move key
#define tb_knxt      172  // next key
#define tb_kopn      173  // open key
#define tb_kopt      174  // options key
#define tb_kprv      175  // previous key
#define tb_kprt      176  // print key
#define tb_krdo      177  // redo key
#define tb_kref      178  // reference key
#define tb_krfr      179  // refresh key
#define tb_krpl      180  // replace key
#define tb_krst      181  // restart key
#define tb_kres      182  // resume key
#define tb_ksav      183  // save key
#define tb_kspd      184  // suspend key
#define tb_kund      185  // undo key
#define tb_kBEG      186  // shifted begin key
#define tb_kCAN      187  // shifted cancel key
#define tb_kCMD      188  // shifted command key
#define tb_kCPY      189  // shifted copy key
#define tb_kCRT      190  // shifted create key
#define tb_kDC       191  // shifted delete-character key
#define tb_kDL       192  // shifted delete-line key
#define tb_kslt      193  // select key
#define tb_kEND      194  // shifted end key
#define tb_kEOL      195  // shifted clear-to-end-of-line key
#define tb_kEXT      196  // shifted exit key
#define tb_kFND      197  // shifted find key
#define tb_kHLP      198  // shifted help key
#define tb_kHOM      199  // shifted home key
#define tb_kIC       200  // shifted insert-character key
#define tb_kLFT      201  // shifted left-arrow key
#define tb_kMSG      202  // shifted message key
#define tb_kMOV      203  // shifted move key
#define tb_kNXT      204  // shifted next key
#define tb_kOPT      205  // shifted options key
#define tb_kPRV      206  // shifted previous key
#define tb_kPRT      207  // shifted print key
#define tb_kRDO      208  // shifted redo key
#define tb_kRPL      209  // shifted replace key
#define tb_kRIT      210  // shifted right-arrow key
#define tb_kRES      211  // shifted resume key
#define tb_kSAV      212  // shifted save key
#define tb_kSPD      213  // shifted suspend key
#define tb_kUND      214  // shifted undo key
#define tb_rfi       215  // send next input char (for ptys)
#define tb_kf11      216  // F11 function key
#define tb_kf12      217  // F12 function key
#define tb_kf13      218  // F13 function key
#define tb_kf14      219  // F14 function key
#define tb_kf15      220  // F15 function key
#define tb_kf16      221  // F16 function key
#define tb_kf17      222  // F17 function key
#define tb_kf18      223  // F18 function key
#define tb_kf19      224  // F19 function key
#define tb_kf20      225  // F20 function key
#define tb_kf21      226  // F21 function key
#define tb_kf22      227  // F22 function key
#define tb_kf23      228  // F23 function key
#define tb_kf24      229  // F24 function key
#define tb_kf25      230  // F25 function key
#define tb_kf26      231  // F26 function key
#define tb_kf27      232  // F27 function key
#define tb_kf28      233  // F28 function key
#define tb_kf29      234  // F29 function key
#define tb_kf30      235  // F30 function key
#define tb_kf31      236  // F31 function key
#define tb_kf32      237  // F32 function key
#define tb_kf33      238  // F33 function key
#define tb_kf34      239  // F34 function key
#define tb_kf35      240  // F35 function key
#define tb_kf36      241  // F36 function key
#define tb_kf37      242  // F37 function key
#define tb_kf38      243  // F38 function key
#define tb_kf39      244  // F39 function key
#define tb_kf40      245  // F40 function key
#define tb_kf41      246  // F41 function key
#define tb_kf42      247  // F42 function key
#define tb_kf43      248  // F43 function key
#define tb_kf44      249  // F44 function key
#define tb_kf45      250  // F45 function key
#define tb_kf46      251  // F46 function key
#define tb_kf47      252  // F47 function key
#define tb_kf48      253  // F48 function key
#define tb_kf49      254  // F49 function key
#define tb_kf50      255  // F50 function key
#define tb_kf51      256  // F51 function key
#define tb_kf52      257  // F52 function key
#define tb_kf53      258  // F53 function key
#define tb_kf54      259  // F54 function key
#define tb_kf55      260  // F55 function key
#define tb_kf56      261  // F56 function key
#define tb_kf57      262  // F57 function key
#define tb_kf58      263  // F58 function key
#define tb_kf59      264  // F59 function key
#define tb_kf60      265  // F60 function key
#define tb_kf61      266  // F61 function key
#define tb_kf62      267  // F62 function key
#define tb_kf63      268  // F63 function key
#define tb_el1       269  // Clear to beginning of line
#define tb_mgc       270  // clear right and left soft margins
#define tb_smgl      271  // set left soft margin at current column. See smgl. (ML is not in BSD termcap).
#define tb_smgr      272  // set right soft margin at current column
#define tb_fln       273  // label format
#define tb_sclk      274  // set clock, #1 hrs #2 mins #3 secs
#define tb_dclk      275  // display clock
#define tb_rmclk     276  // remove clock
#define tb_cwin      277  // define a window #1 from #2,#3 to #4,#5
#define tb_wingo     278  // go to window #1
#define tb_hup       279  // hang-up phone
#define tb_dial      280  // dial number #1
#define tb_qdial     281  // dial number #1 without checking
#define tb_tone      282  // select touch tone dialing
#define tb_pulse     283  // select pulse dialing
#define tb_hook      284  // flash switch hook
#define tb_pause     285  // pause for 2-3 seconds
#define tb_wait      286  // wait for dial-tone
#define tb_u0        287  // User string #0
#define tb_u1        288  // User string #1
#define tb_u2        289  // User string #2
#define tb_u3        290  // User string #3
#define tb_u4        291  // User string #4
#define tb_u5        292  // User string #5
#define tb_u6        293  // User string #6
#define tb_u7        294  // User string #7
#define tb_u8        295  // User string #8
#define tb_u9        296  // User string #9
#define tb_op        297  // Set default pair to its original value
#define tb_oc        298  // Set all color pairs to the original ones
#define tb_initc     299  // initialize color #1 to (#2,#3,#4)
#define tb_initp     300  // Initialize color pair #1 to fg=(#2,#3,#4), bg=(#5,#6,#7)
#define tb_scp       301  // Set current color pair to #1
#define tb_setf      302  // Set foreground color #1
#define tb_setb      303  // Set background color #1
#define tb_cpi       304  // Change number of characters per inch to #1
#define tb_lpi       305  // Change number of lines per inch to #1
#define tb_chr       306  // Change horizontal resolution to #1
#define tb_cvr       307  // Change vertical resolution to #1
#define tb_defc      308  // Define a character #1, #2 dots wide, descender #3
#define tb_swidm     309  // Enter double-wide mode
#define tb_sdrfq     310  // Enter draft-quality mode
#define tb_sitm      311  // Enter italic mode
#define tb_slm       312  // Start leftward carriage motion
#define tb_smicm     313  // Start micro-motion mode
#define tb_snlq      314  // Enter NLQ mode
#define tb_snrmq     315  // Enter normal-quality mode
#define tb_sshm      316  // Enter shadow-print mode
#define tb_ssubm     317  // Enter subscript mode
#define tb_ssupm     318  // Enter superscript mode
#define tb_sum       319  // Start upward carriage motion
#define tb_rwidm     320  // End double-wide mode
#define tb_ritm      321  // End italic mode
#define tb_rlm       322  // End left-motion mode
#define tb_rmicm     323  // End micro-motion mode
#define tb_rshm      324  // End shadow-print mode
#define tb_rsubm     325  // End subscript mode
#define tb_rsupm     326  // End superscript mode
#define tb_rum       327  // End reverse character motion
#define tb_mhpa      328  // Like column_address in micro mode
#define tb_mcud1     329  // Like cursor_down in micro mode
#define tb_mcub1     330  // Like cursor_left in micro mode
#define tb_mcuf1     331  // Like cursor_right in micro mode
#define tb_mvpa      332  // Like row_address #1 in micro mode
#define tb_mcuu1     333  // Like cursor_up in micro mode
#define tb_porder    334  // Match software bits to print-head pins
#define tb_mcud      335  // Like parm_down_cursor in micro mode
#define tb_mcub      336  // Like parm_left_cursor in micro mode
#define tb_mcuf      337  // Like parm_right_cursor in micro mode
#define tb_mcuu      338  // Like parm_up_cursor in micro mode
#define tb_scs       339  // Select character set, #1
#define tb_smgb      340  // Set bottom margin at current line
#define tb_smgbp     341  // Set bottom margin at line #1 or (if smgtp is not given) #2 lines from bottom
#define tb_smglp     342  // Set left (right) margin at column #1
#define tb_smgrp     343  // Set right margin at column #1
#define tb_smgt      344  // Set top margin at current line
#define tb_smgtp     345  // Set top (bottom) margin at row #1
#define tb_sbim      346  // Start printing bit image graphics
#define tb_scsd      347  // Start character set definition #1, with #2 characters in the set
#define tb_rbim      348  // Stop printing bit image graphics
#define tb_rcsd      349  // End definition of character set #1
#define tb_subcs     350  // List of subscriptable characters
#define tb_supcs     351  // List of superscriptable characters
#define tb_docr      352  // Printing any of these characters causes CR
#define tb_zerom     353  // No motion for subsequent character
#define tb_csnm      354  // Produce #1'th item from list of character set names
#define tb_kmous     355  // Mouse event has occurred
#define tb_minfo     356  // Mouse status information
#define tb_reqmp     357  // Request mouse position
#define tb_getm      358  // Curses should get button events, parameter #1 not documented.
#define tb_setaf     359  // Set foreground color to #1, using ANSI escape
#define tb_setab     360  // Set background color to #1, using ANSI escape
#define tb_pfxl      361  // Program function key #1 to type string #2 and show string #3
#define tb_devt      362  // Indicate language/codeset support
#define tb_csin      363  // Init sequence for multiple codesets
#define tb_s0ds      364  // Shift to codeset 0 (EUC set 0, ASCII)
#define tb_s1ds      365  // Shift to codeset 1
#define tb_s2ds      366  // Shift to codeset 2
#define tb_s3ds      367  // Shift to codeset 3
#define tb_smglr     368  // Set both left and right margins to #1, #2. (ML is not in BSD termcap).
#define tb_smgtb     369  // Sets both top and bottom margins to #1, #2
#define tb_birep     370  // Repeat bit image cell #1 #2 times
#define tb_binel     371  // Move to next row of the bit image
#define tb_bicr      372  // Move to beginning of same row
#define tb_colornm   373  // Give name for color #1
#define tb_defbi     374  // Define rectangular bit image region
#define tb_endbi     375  // End a bit-image region
#define tb_setcolor  376  // Change to ribbon color #1
#define tb_slines    377  // Set page length to #1 lines
#define tb_dispc     378  // Display PC character #1
#define tb_smpch     379  // Enter PC character display mode
#define tb_rmpch     380  // Exit PC character display mode
#define tb_smsc      381  // Enter PC scancode mode
#define tb_rmsc      382  // Exit PC scancode mode
#define tb_pctrm     383  // PC terminal options
#define tb_scesc     384  // Escape for scancode emulation
#define tb_scesa     385  // Alternate escape for scancode emulation
#define tb_ehhlm     386  // Enter horizontal highlight mode
#define tb_elhlm     387  // Enter left highlight mode
#define tb_elohlm    388  // Enter low highlight mode
#define tb_erhlm     389  // Enter right highlight mode
#define tb_ethlm     390  // Enter top highlight mode
#define tb_evhlm     391  // Enter vertical highlight mode
#define tb_sgr1      392  // Define second set of video attributes #1-#6
#define tb_slength   393  // Set page length to #1 hundredth of an inch (some implementations use sL for termcap).
#define tb_OTi2      394  // secondary initialization string
#define tb_OTrs      395  // terminal reset string
#define tb_OTnl      396  // use to move down
#define tb_OTbc      397  // move left, if not ^H
#define tb_OTko      398  // list of self-mapped keycaps
#define tb_OTma      399  // map motion-keys for vi version 2
#define tb_OTG2      400  // single upper left
#define tb_OTG3      401  // single lower left
#define tb_OTG1      402  // single upper right
#define tb_OTG4      403  // single lower right
#define tb_OTGR      404  // tee pointing right
#define tb_OTGL      405  // tee pointing left
#define tb_OTGU      406  // tee pointing up
#define tb_OTGD      407  // tee pointing down
#define tb_OTGH      408  // single horizontal line
#define tb_OTGV      409  // single vertical line
#define tb_OTGC      410  // single intersection
#define tb_meml      411  // lock memory above cursor
#define tb_memu      412  // unlock memory
#define tb_box1      413  // box characters primary set
