/*
 *
 * tbti.h
 *
 * Minimal, standalone terminfo(5) processor.
 *
 * This library can be used as a replacement for much of the ncurses terminfo
 * loading and string processing interface. It implements loading and parsing of
 * binary terminfo files as described by term(5).
 *
 * See also:
 *   <https://pubs.opengroup.org/onlinepubs/007908799/xcurses/term.h.html>
 *
 */
#include <stdint.h>

/*
 * Struct tb_termtype is an in-memory version of a terminfo file.
 */
typedef struct tb_termtype {
    char    *term_names;          // names for terminal separated by "|" chars
    int8_t  *bools;               // array of boolean values
    int16_t *nums;                // array of integer values
    int16_t *str_offs;            // array of string offsets
    char    *str_table;           // pointer to string table

    uint16_t num_bools;
    uint16_t num_nums;
    uint16_t num_strings;

    char  *ext_str_table;         // pointer to extended string table
    char  **ext_names;            // corresponding names

    uint16_t ext_bools;           // count extensions to bools
    uint16_t ext_nums;            // count extensions to numbers
    uint16_t ext_strings;         // count extensions to strings
} tb_termtype;

/*
 * Struct tb_terminal holds terminal type information bound to a specific
 * file descriptor.
 */
typedef struct tb_terminal {
    tb_termtype type;             // terminal type description
    short       fd;               // file description being written to
    char *      termname;         // term name used in setupterm
    char *      termdata;         // raw terminfo data loaded from file
} tb_terminal;

/*
 * Read the terminfo database and set up the terminal info structures for the
 * given terminal name, or the TERM environment variable when term is NULL.
 *
 * Simplest invocation uses TERM and standard output:
 *     tb_setupterm(NULL, 1, NULL);
 *
 * Returns 0 on success, -1 if no terminal string is set, -2 if the terminfo
 * file cannot be found.
 *
 * Ncurses counterpart: setupterm().
 */
int tb_setupterm(char *termname, int fd);

/*
 * Read terminfo defined capabilities for the current terminal.
 * Each function takes one of the capability name values defined in this file.
 *
 * Ncurses counterpart: tigetflag(), tigetnum(), tigetstr().
 * */
int   tb_getflag(int cap);
int   tb_getnum(int cap);
char *tb_getstr(int cap);

/*
 * Process terminfo parameterized string.
 * The c argument specifies the number of variadic arguments that follow.
 *
 * Returns a newly allocated processed string unless ps is NULL, in which
 * case NULL is returned. The returned string must be freed with free(3).
 */
char *tb_parmn(char *ps, int c, ...);

/*
 * Load terminfo structures without setting the current global terminal.
 * Useful when building tools that inspect terminfo files.
 */
int tb_loadterm(tb_terminal *term, char *termname, int fd);
void tb_freeterm(tb_terminal *term);

/* Capabilities generated by tools/gencaps.sh on Mon 04 May 2020 08:53:50 PM CDT */

// Boolean Capabilities
#define tb_auto_left_margin          0   // cub1 wraps from column 0 to last column
#define tb_auto_right_margin         1   // terminal has automatic margins
#define tb_no_esc_ctlc               2   // beehive (f1=escape, f2=ctrl C)
#define tb_ceol_standout_glitch      3   // standout not erased by overwriting (hp)
#define tb_eat_newline_glitch        4   // newline ignored after 80 cols (concept)
#define tb_erase_overstrike          5   // can erase overstrikes with a blank
#define tb_generic_type              6   // generic line type
#define tb_hard_copy                 7   // hardcopy terminal
#define tb_has_meta_key              8   // Has a meta key (i.e., sets 8th-bit)
#define tb_has_status_line           9   // has extra status line
#define tb_insert_null_glitch        10  // insert mode distinguishes nulls
#define tb_memory_above              11  // display may be retained above the screen
#define tb_memory_below              12  // display may be retained below the screen
#define tb_move_insert_mode          13  // safe to move while in insert mode
#define tb_move_standout_mode        14  // safe to move while in standout mode
#define tb_over_strike               15  // terminal can overstrike
#define tb_status_line_esc_ok        16  // escape can be used on the status line
#define tb_dest_tabs_magic_smso      17  // tabs destructive, magic so char (t1061)
#define tb_tilde_glitch              18  // cannot print ~'s (Hazeltine)
#define tb_transparent_underline     19  // underline character overstrikes
#define tb_xon_xoff                  20  // terminal uses xon/xoff handshaking
#define tb_needs_xon_xoff            21  // padding will not work, xon/xoff required
#define tb_prtr_silent               22  // printer will not echo on screen
#define tb_hard_cursor               23  // cursor is hard to see
#define tb_non_rev_rmcup             24  // smcup does not reverse rmcup
#define tb_no_pad_char               25  // pad character does not exist
#define tb_non_dest_scroll_region    26  // scrolling region is non-destructive
#define tb_can_change                27  // terminal can re-define existing colors
#define tb_back_color_erase          28  // screen erased with background color
#define tb_hue_lightness_saturation  29  // terminal uses only HLS color notation (Tektronix)
#define tb_col_addr_glitch           30  // only positive motion for hpa/mhpa caps
#define tb_cr_cancels_micro_mode     31  // using cr turns off micro mode
#define tb_has_print_wheel           32  // printer needs operator to change character set
#define tb_row_addr_glitch           33  // only positive motion for vpa/mvpa caps
#define tb_semi_auto_right_margin    34  // printing in last column causes cr
#define tb_cpi_changes_res           35  // changing character pitch changes resolution
#define tb_lpi_changes_res           36  // changing line pitch changes resolution
#define tb_backspaces_with_bs        37  // uses ^H to move left
#define tb_crt_no_scrolling          38  // crt cannot scroll
#define tb_no_correctly_working_cr   39  // no way to go to start of line
#define tb_gnu_has_meta_key          40  // has meta key
#define tb_linefeed_is_newline       41  // move down with
#define tb_has_hardware_tabs         42  // has 8-char tabs invoked with ^I
#define tb_return_does_clr_eol       43  // return clears the line

// Numeric Capabilities
#define tb_columns                  0   // number of columns in a line
#define tb_init_tabs                1   // tabs initially every # spaces
#define tb_lines                    2   // number of lines on screen or page
#define tb_lines_of_memory          3   // lines of memory if > line. 0 means varies
#define tb_magic_cookie_glitch      4   // number of blank characters left by smso or rmso
#define tb_padding_baud_rate        5   // lowest baud rate where padding needed
#define tb_virtual_terminal         6   // virtual terminal number (CB/unix)
#define tb_width_status_line        7   // number of columns in status line
#define tb_num_labels               8   // number of labels on screen
#define tb_label_height             9   // rows in each label
#define tb_label_width              10  // columns in each label
#define tb_max_attributes           11  // maximum combined attributes terminal can handle
#define tb_maximum_windows          12  // maximum number of definable windows
#define tb_max_colors               13  // maximum number of colors on screen
#define tb_max_pairs                14  // maximum number of color-pairs on the screen
#define tb_no_color_video           15  // video attributes that cannot be used with colors
#define tb_buffer_capacity          16  // numbers of bytes buffered before printing
#define tb_dot_vert_spacing         17  // spacing of pins vertically in pins per inch
#define tb_dot_horz_spacing         18  // spacing of dots horizontally in dots per inch
#define tb_max_micro_address        19  // maximum value in micro_..._address
#define tb_max_micro_jump           20  // maximum value in parm_..._micro
#define tb_micro_col_size           21  // character step size when in micro mode
#define tb_micro_line_size          22  // line step size when in micro mode
#define tb_number_of_pins           23  // numbers of pins in print-head
#define tb_output_res_char          24  // horizontal resolution in units per line
#define tb_output_res_line          25  // vertical resolution in units per line
#define tb_output_res_horz_inch     26  // horizontal resolution in units per inch
#define tb_output_res_vert_inch     27  // vertical resolution in units per inch
#define tb_print_rate               28  // print rate in characters per second
#define tb_wide_char_size           29  // character step size when in double wide mode
#define tb_buttons                  30  // number of buttons on mouse
#define tb_bit_image_entwining      31  // number of passes for each bit-image row
#define tb_bit_image_type           32  // type of bit-image device
#define tb_magic_cookie_glitch_ul   33  // number of blanks left by ul
#define tb_carriage_return_delay    34  // pad needed for CR
#define tb_new_line_delay           35  // pad needed for LF
#define tb_backspace_delay          36  // padding required for ^H
#define tb_horizontal_tab_delay     37  // padding required for ^I
#define tb_number_of_function_keys  38  // count of function keys

// String Capabilities
#define tb_back_tab                   0    // back tab (P)
#define tb_bell                       1    // audible signal (bell) (P)
#define tb_carriage_return            2    // carriage return (P*) (P*)
#define tb_change_scroll_region       3    // change region to line #1 to line #2 (P)
#define tb_clear_all_tabs             4    // clear all tab stops (P)
#define tb_clear_screen               5    // clear screen and home cursor (P*)
#define tb_clr_eol                    6    // clear to end of line (P)
#define tb_clr_eos                    7    // clear to end of screen (P*)
#define tb_column_address             8    // horizontal position #1, absolute (P)
#define tb_command_character          9    // terminal settable cmd character in prototype !?
#define tb_cursor_address             10   // move to row #1 columns #2
#define tb_cursor_down                11   // down one line
#define tb_cursor_home                12   // home cursor (if no cup)
#define tb_cursor_invisible           13   // make cursor invisible
#define tb_cursor_left                14   // move left one space
#define tb_cursor_mem_address         15   // memory relative cursor addressing, move to row #1 columns #2
#define tb_cursor_normal              16   // make cursor appear normal (undo civis/cvvis)
#define tb_cursor_right               17   // non-destructive space (move right one space)
#define tb_cursor_to_ll               18   // last line, first column (if no cup)
#define tb_cursor_up                  19   // up one line
#define tb_cursor_visible             20   // make cursor very visible
#define tb_delete_character           21   // delete character (P*)
#define tb_delete_line                22   // delete line (P*)
#define tb_dis_status_line            23   // disable status line
#define tb_down_half_line             24   // half a line down
#define tb_enter_alt_charset_mode     25   // start alternate character set (P)
#define tb_enter_blink_mode           26   // turn on blinking
#define tb_enter_bold_mode            27   // turn on bold (extra bright) mode
#define tb_enter_ca_mode              28   // string to start programs using cup
#define tb_enter_delete_mode          29   // enter delete mode
#define tb_enter_dim_mode             30   // turn on half-bright mode
#define tb_enter_insert_mode          31   // enter insert mode
#define tb_enter_secure_mode          32   // turn on blank mode (characters invisible)
#define tb_enter_protected_mode       33   // turn on protected mode
#define tb_enter_reverse_mode         34   // turn on reverse video mode
#define tb_enter_standout_mode        35   // begin standout mode
#define tb_enter_underline_mode       36   // begin underline mode
#define tb_erase_chars                37   // erase #1 characters (P)
#define tb_exit_alt_charset_mode      38   // end alternate character set (P)
#define tb_exit_attribute_mode        39   // turn off all attributes
#define tb_exit_ca_mode               40   // strings to end programs using cup
#define tb_exit_delete_mode           41   // end delete mode
#define tb_exit_insert_mode           42   // exit insert mode
#define tb_exit_standout_mode         43   // exit standout mode
#define tb_exit_underline_mode        44   // exit underline mode
#define tb_flash_screen               45   // visible bell (may not move cursor)
#define tb_form_feed                  46   // hardcopy terminal page eject (P*)
#define tb_from_status_line           47   // return from status line
#define tb_init_1string               48   // initialization string
#define tb_init_2string               49   // initialization string
#define tb_init_3string               50   // initialization string
#define tb_init_file                  51   // name of initialization file
#define tb_insert_character           52   // insert character (P)
#define tb_insert_line                53   // insert line (P*)
#define tb_insert_padding             54   // insert padding after inserted character
#define tb_key_backspace              55   // backspace key
#define tb_key_catab                  56   // clear-all-tabs key
#define tb_key_clear                  57   // clear-screen or erase key
#define tb_key_ctab                   58   // clear-tab key
#define tb_key_dc                     59   // delete-character key
#define tb_key_dl                     60   // delete-line key
#define tb_key_down                   61   // down-arrow key
#define tb_key_eic                    62   // sent by rmir or smir in insert mode
#define tb_key_eol                    63   // clear-to-end-of-line key
#define tb_key_eos                    64   // clear-to-end-of-screen key
#define tb_key_f0                     65   // F0 function key
#define tb_key_f1                     66   // F1 function key
#define tb_key_f10                    67   // F10 function key
#define tb_key_f2                     68   // F2 function key
#define tb_key_f3                     69   // F3 function key
#define tb_key_f4                     70   // F4 function key
#define tb_key_f5                     71   // F5 function key
#define tb_key_f6                     72   // F6 function key
#define tb_key_f7                     73   // F7 function key
#define tb_key_f8                     74   // F8 function key
#define tb_key_f9                     75   // F9 function key
#define tb_key_home                   76   // home key
#define tb_key_ic                     77   // insert-character key
#define tb_key_il                     78   // insert-line key
#define tb_key_left                   79   // left-arrow key
#define tb_key_ll                     80   // lower-left key (home down)
#define tb_key_npage                  81   // next-page key
#define tb_key_ppage                  82   // previous-page key
#define tb_key_right                  83   // right-arrow key
#define tb_key_sf                     84   // scroll-forward key
#define tb_key_sr                     85   // scroll-backward key
#define tb_key_stab                   86   // set-tab key
#define tb_key_up                     87   // up-arrow key
#define tb_keypad_local               88   // leave 'keyboard_transmit' mode
#define tb_keypad_xmit                89   // enter 'keyboard_transmit' mode
#define tb_lab_f0                     90   // label on function key f0 if not f0
#define tb_lab_f1                     91   // label on function key f1 if not f1
#define tb_lab_f10                    92   // label on function key f10 if not f10
#define tb_lab_f2                     93   // label on function key f2 if not f2
#define tb_lab_f3                     94   // label on function key f3 if not f3
#define tb_lab_f4                     95   // label on function key f4 if not f4
#define tb_lab_f5                     96   // label on function key f5 if not f5
#define tb_lab_f6                     97   // label on function key f6 if not f6
#define tb_lab_f7                     98   // label on function key f7 if not f7
#define tb_lab_f8                     99   // label on function key f8 if not f8
#define tb_lab_f9                     100  // label on function key f9 if not f9
#define tb_meta_off                   101  // turn off meta mode
#define tb_meta_on                    102  // turn on meta mode (8th-bit on)
#define tb_newline                    103  // newline (behave like cr followed by lf)
#define tb_pad_char                   104  // padding char (instead of null)
#define tb_parm_dch                   105  // delete #1 characters (P*)
#define tb_parm_delete_line           106  // delete #1 lines (P*)
#define tb_parm_down_cursor           107  // down #1 lines (P*)
#define tb_parm_ich                   108  // insert #1 characters (P*)
#define tb_parm_index                 109  // scroll forward #1 lines (P)
#define tb_parm_insert_line           110  // insert #1 lines (P*)
#define tb_parm_left_cursor           111  // move #1 characters to the left (P)
#define tb_parm_right_cursor          112  // move #1 characters to the right (P*)
#define tb_parm_rindex                113  // scroll back #1 lines (P)
#define tb_parm_up_cursor             114  // up #1 lines (P*)
#define tb_pkey_key                   115  // program function key #1 to type string #2
#define tb_pkey_local                 116  // program function key #1 to execute string #2
#define tb_pkey_xmit                  117  // program function key #1 to transmit string #2
#define tb_print_screen               118  // print contents of screen
#define tb_prtr_off                   119  // turn off printer
#define tb_prtr_on                    120  // turn on printer
#define tb_repeat_char                121  // repeat char #1 #2 times (P*)
#define tb_reset_1string              122  // reset string
#define tb_reset_2string              123  // reset string
#define tb_reset_3string              124  // reset string
#define tb_reset_file                 125  // name of reset file
#define tb_restore_cursor             126  // restore cursor to position of last save_cursor
#define tb_row_address                127  // vertical position #1 absolute (P)
#define tb_save_cursor                128  // save current cursor position (P)
#define tb_scroll_forward             129  // scroll text up (P)
#define tb_scroll_reverse             130  // scroll text down (P)
#define tb_set_attributes             131  // define video attributes #1-#9 (PG9)
#define tb_set_tab                    132  // set a tab in every row, current columns
#define tb_set_window                 133  // current window is lines #1-#2 cols #3-#4
#define tb_tab                        134  // tab to next 8-space hardware tab stop
#define tb_to_status_line             135  // move to status line, column #1
#define tb_underline_char             136  // underline char and move past it
#define tb_up_half_line               137  // half a line up
#define tb_init_prog                  138  // path name of program for initialization
#define tb_key_a1                     139  // upper left of keypad
#define tb_key_a3                     140  // upper right of keypad
#define tb_key_b2                     141  // center of keypad
#define tb_key_c1                     142  // lower left of keypad
#define tb_key_c3                     143  // lower right of keypad
#define tb_prtr_non                   144  // turn on printer for #1 bytes
#define tb_char_padding               145  // like ip but when in insert mode
#define tb_acs_chars                  146  // graphics charset pairs, based on vt100
#define tb_plab_norm                  147  // program label #1 to show string #2
#define tb_key_btab                   148  // back-tab key
#define tb_enter_xon_mode             149  // turn on xon/xoff handshaking
#define tb_exit_xon_mode              150  // turn off xon/xoff handshaking
#define tb_enter_am_mode              151  // turn on automatic margins
#define tb_exit_am_mode               152  // turn off automatic margins
#define tb_xon_character              153  // XON character
#define tb_xoff_character             154  // XOFF character
#define tb_ena_acs                    155  // enable alternate char set
#define tb_label_on                   156  // turn on soft labels
#define tb_label_off                  157  // turn off soft labels
#define tb_key_beg                    158  // begin key
#define tb_key_cancel                 159  // cancel key
#define tb_key_close                  160  // close key
#define tb_key_command                161  // command key
#define tb_key_copy                   162  // copy key
#define tb_key_create                 163  // create key
#define tb_key_end                    164  // end key
#define tb_key_enter                  165  // enter/send key
#define tb_key_exit                   166  // exit key
#define tb_key_find                   167  // find key
#define tb_key_help                   168  // help key
#define tb_key_mark                   169  // mark key
#define tb_key_message                170  // message key
#define tb_key_move                   171  // move key
#define tb_key_next                   172  // next key
#define tb_key_open                   173  // open key
#define tb_key_options                174  // options key
#define tb_key_previous               175  // previous key
#define tb_key_print                  176  // print key
#define tb_key_redo                   177  // redo key
#define tb_key_reference              178  // reference key
#define tb_key_refresh                179  // refresh key
#define tb_key_replace                180  // replace key
#define tb_key_restart                181  // restart key
#define tb_key_resume                 182  // resume key
#define tb_key_save                   183  // save key
#define tb_key_suspend                184  // suspend key
#define tb_key_undo                   185  // undo key
#define tb_key_sbeg                   186  // shifted begin key
#define tb_key_scancel                187  // shifted cancel key
#define tb_key_scommand               188  // shifted command key
#define tb_key_scopy                  189  // shifted copy key
#define tb_key_screate                190  // shifted create key
#define tb_key_sdc                    191  // shifted delete-character key
#define tb_key_sdl                    192  // shifted delete-line key
#define tb_key_select                 193  // select key
#define tb_key_send                   194  // shifted end key
#define tb_key_seol                   195  // shifted clear-to-end-of-line key
#define tb_key_sexit                  196  // shifted exit key
#define tb_key_sfind                  197  // shifted find key
#define tb_key_shelp                  198  // shifted help key
#define tb_key_shome                  199  // shifted home key
#define tb_key_sic                    200  // shifted insert-character key
#define tb_key_sleft                  201  // shifted left-arrow key
#define tb_key_smessage               202  // shifted message key
#define tb_key_smove                  203  // shifted move key
#define tb_key_snext                  204  // shifted next key
#define tb_key_soptions               205  // shifted options key
#define tb_key_sprevious              206  // shifted previous key
#define tb_key_sprint                 207  // shifted print key
#define tb_key_sredo                  208  // shifted redo key
#define tb_key_sreplace               209  // shifted replace key
#define tb_key_sright                 210  // shifted right-arrow key
#define tb_key_srsume                 211  // shifted resume key
#define tb_key_ssave                  212  // shifted save key
#define tb_key_ssuspend               213  // shifted suspend key
#define tb_key_sundo                  214  // shifted undo key
#define tb_req_for_input              215  // send next input char (for ptys)
#define tb_key_f11                    216  // F11 function key
#define tb_key_f12                    217  // F12 function key
#define tb_key_f13                    218  // F13 function key
#define tb_key_f14                    219  // F14 function key
#define tb_key_f15                    220  // F15 function key
#define tb_key_f16                    221  // F16 function key
#define tb_key_f17                    222  // F17 function key
#define tb_key_f18                    223  // F18 function key
#define tb_key_f19                    224  // F19 function key
#define tb_key_f20                    225  // F20 function key
#define tb_key_f21                    226  // F21 function key
#define tb_key_f22                    227  // F22 function key
#define tb_key_f23                    228  // F23 function key
#define tb_key_f24                    229  // F24 function key
#define tb_key_f25                    230  // F25 function key
#define tb_key_f26                    231  // F26 function key
#define tb_key_f27                    232  // F27 function key
#define tb_key_f28                    233  // F28 function key
#define tb_key_f29                    234  // F29 function key
#define tb_key_f30                    235  // F30 function key
#define tb_key_f31                    236  // F31 function key
#define tb_key_f32                    237  // F32 function key
#define tb_key_f33                    238  // F33 function key
#define tb_key_f34                    239  // F34 function key
#define tb_key_f35                    240  // F35 function key
#define tb_key_f36                    241  // F36 function key
#define tb_key_f37                    242  // F37 function key
#define tb_key_f38                    243  // F38 function key
#define tb_key_f39                    244  // F39 function key
#define tb_key_f40                    245  // F40 function key
#define tb_key_f41                    246  // F41 function key
#define tb_key_f42                    247  // F42 function key
#define tb_key_f43                    248  // F43 function key
#define tb_key_f44                    249  // F44 function key
#define tb_key_f45                    250  // F45 function key
#define tb_key_f46                    251  // F46 function key
#define tb_key_f47                    252  // F47 function key
#define tb_key_f48                    253  // F48 function key
#define tb_key_f49                    254  // F49 function key
#define tb_key_f50                    255  // F50 function key
#define tb_key_f51                    256  // F51 function key
#define tb_key_f52                    257  // F52 function key
#define tb_key_f53                    258  // F53 function key
#define tb_key_f54                    259  // F54 function key
#define tb_key_f55                    260  // F55 function key
#define tb_key_f56                    261  // F56 function key
#define tb_key_f57                    262  // F57 function key
#define tb_key_f58                    263  // F58 function key
#define tb_key_f59                    264  // F59 function key
#define tb_key_f60                    265  // F60 function key
#define tb_key_f61                    266  // F61 function key
#define tb_key_f62                    267  // F62 function key
#define tb_key_f63                    268  // F63 function key
#define tb_clr_bol                    269  // Clear to beginning of line
#define tb_clear_margins              270  // clear right and left soft margins
#define tb_set_left_margin            271  // set left soft margin at current column. See smgl. (ML is not in BSD termcap).
#define tb_set_right_margin           272  // set right soft margin at current column
#define tb_label_format               273  // label format
#define tb_set_clock                  274  // set clock, #1 hrs #2 mins #3 secs
#define tb_display_clock              275  // display clock
#define tb_remove_clock               276  // remove clock
#define tb_create_window              277  // define a window #1 from #2,#3 to #4,#5
#define tb_goto_window                278  // go to window #1
#define tb_hangup                     279  // hang-up phone
#define tb_dial_phone                 280  // dial number #1
#define tb_quick_dial                 281  // dial number #1 without checking
#define tb_tone                       282  // select touch tone dialing
#define tb_pulse                      283  // select pulse dialing
#define tb_flash_hook                 284  // flash switch hook
#define tb_fixed_pause                285  // pause for 2-3 seconds
#define tb_wait_tone                  286  // wait for dial-tone
#define tb_user0                      287  // User string #0
#define tb_user1                      288  // User string #1
#define tb_user2                      289  // User string #2
#define tb_user3                      290  // User string #3
#define tb_user4                      291  // User string #4
#define tb_user5                      292  // User string #5
#define tb_user6                      293  // User string #6
#define tb_user7                      294  // User string #7
#define tb_user8                      295  // User string #8
#define tb_user9                      296  // User string #9
#define tb_orig_pair                  297  // Set default pair to its original value
#define tb_orig_colors                298  // Set all color pairs to the original ones
#define tb_initialize_color           299  // initialize color #1 to (#2,#3,#4)
#define tb_initialize_pair            300  // Initialize color pair #1 to fg=(#2,#3,#4), bg=(#5,#6,#7)
#define tb_set_color_pair             301  // Set current color pair to #1
#define tb_set_foreground             302  // Set foreground color #1
#define tb_set_background             303  // Set background color #1
#define tb_change_char_pitch          304  // Change number of characters per inch to #1
#define tb_change_line_pitch          305  // Change number of lines per inch to #1
#define tb_change_res_horz            306  // Change horizontal resolution to #1
#define tb_change_res_vert            307  // Change vertical resolution to #1
#define tb_define_char                308  // Define a character #1, #2 dots wide, descender #3
#define tb_enter_doublewide_mode      309  // Enter double-wide mode
#define tb_enter_draft_quality        310  // Enter draft-quality mode
#define tb_enter_italics_mode         311  // Enter italic mode
#define tb_enter_leftward_mode        312  // Start leftward carriage motion
#define tb_enter_micro_mode           313  // Start micro-motion mode
#define tb_enter_near_letter_quality  314  // Enter NLQ mode
#define tb_enter_normal_quality       315  // Enter normal-quality mode
#define tb_enter_shadow_mode          316  // Enter shadow-print mode
#define tb_enter_subscript_mode       317  // Enter subscript mode
#define tb_enter_superscript_mode     318  // Enter superscript mode
#define tb_enter_upward_mode          319  // Start upward carriage motion
#define tb_exit_doublewide_mode       320  // End double-wide mode
#define tb_exit_italics_mode          321  // End italic mode
#define tb_exit_leftward_mode         322  // End left-motion mode
#define tb_exit_micro_mode            323  // End micro-motion mode
#define tb_exit_shadow_mode           324  // End shadow-print mode
#define tb_exit_subscript_mode        325  // End subscript mode
#define tb_exit_superscript_mode      326  // End superscript mode
#define tb_exit_upward_mode           327  // End reverse character motion
#define tb_micro_column_address       328  // Like column_address in micro mode
#define tb_micro_down                 329  // Like cursor_down in micro mode
#define tb_micro_left                 330  // Like cursor_left in micro mode
#define tb_micro_right                331  // Like cursor_right in micro mode
#define tb_micro_row_address          332  // Like row_address #1 in micro mode
#define tb_micro_up                   333  // Like cursor_up in micro mode
#define tb_order_of_pins              334  // Match software bits to print-head pins
#define tb_parm_down_micro            335  // Like parm_down_cursor in micro mode
#define tb_parm_left_micro            336  // Like parm_left_cursor in micro mode
#define tb_parm_right_micro           337  // Like parm_right_cursor in micro mode
#define tb_parm_up_micro              338  // Like parm_up_cursor in micro mode
#define tb_select_char_set            339  // Select character set, #1
#define tb_set_bottom_margin          340  // Set bottom margin at current line
#define tb_set_bottom_margin_parm     341  // Set bottom margin at line #1 or (if smgtp is not given) #2 lines from bottom
#define tb_set_left_margin_parm       342  // Set left (right) margin at column #1
#define tb_set_right_margin_parm      343  // Set right margin at column #1
#define tb_set_top_margin             344  // Set top margin at current line
#define tb_set_top_margin_parm        345  // Set top (bottom) margin at row #1
#define tb_start_bit_image            346  // Start printing bit image graphics
#define tb_start_char_set_def         347  // Start character set definition #1, with #2 characters in the set
#define tb_stop_bit_image             348  // Stop printing bit image graphics
#define tb_stop_char_set_def          349  // End definition of character set #1
#define tb_subscript_characters       350  // List of subscriptable characters
#define tb_superscript_characters     351  // List of superscriptable characters
#define tb_these_cause_cr             352  // Printing any of these characters causes CR
#define tb_zero_motion                353  // No motion for subsequent character
#define tb_char_set_names             354  // Produce #1'th item from list of character set names
#define tb_key_mouse                  355  // Mouse event has occurred
#define tb_mouse_info                 356  // Mouse status information
#define tb_req_mouse_pos              357  // Request mouse position
#define tb_get_mouse                  358  // Curses should get button events, parameter #1 not documented.
#define tb_set_a_foreground           359  // Set foreground color to #1, using ANSI escape
#define tb_set_a_background           360  // Set background color to #1, using ANSI escape
#define tb_pkey_plab                  361  // Program function key #1 to type string #2 and show string #3
#define tb_device_type                362  // Indicate language/codeset support
#define tb_code_set_init              363  // Init sequence for multiple codesets
#define tb_set0_des_seq               364  // Shift to codeset 0 (EUC set 0, ASCII)
#define tb_set1_des_seq               365  // Shift to codeset 1
#define tb_set2_des_seq               366  // Shift to codeset 2
#define tb_set3_des_seq               367  // Shift to codeset 3
#define tb_set_lr_margin              368  // Set both left and right margins to #1, #2. (ML is not in BSD termcap).
#define tb_set_tb_margin              369  // Sets both top and bottom margins to #1, #2
#define tb_bit_image_repeat           370  // Repeat bit image cell #1 #2 times
#define tb_bit_image_newline          371  // Move to next row of the bit image
#define tb_bit_image_carriage_return  372  // Move to beginning of same row
#define tb_color_names                373  // Give name for color #1
#define tb_define_bit_image_region    374  // Define rectangular bit image region
#define tb_end_bit_image_region       375  // End a bit-image region
#define tb_set_color_band             376  // Change to ribbon color #1
#define tb_set_page_length            377  // Set page length to #1 lines
#define tb_display_pc_char            378  // Display PC character #1
#define tb_enter_pc_charset_mode      379  // Enter PC character display mode
#define tb_exit_pc_charset_mode       380  // Exit PC character display mode
#define tb_enter_scancode_mode        381  // Enter PC scancode mode
#define tb_exit_scancode_mode         382  // Exit PC scancode mode
#define tb_pc_term_options            383  // PC terminal options
#define tb_scancode_escape            384  // Escape for scancode emulation
#define tb_alt_scancode_esc           385  // Alternate escape for scancode emulation
#define tb_enter_horizontal_hl_mode   386  // Enter horizontal highlight mode
#define tb_enter_left_hl_mode         387  // Enter left highlight mode
#define tb_enter_low_hl_mode          388  // Enter low highlight mode
#define tb_enter_right_hl_mode        389  // Enter right highlight mode
#define tb_enter_top_hl_mode          390  // Enter top highlight mode
#define tb_enter_vertical_hl_mode     391  // Enter vertical highlight mode
#define tb_set_a_attributes           392  // Define second set of video attributes #1-#6
#define tb_set_pglen_inch             393  // Set page length to #1 hundredth of an inch (some implementations use sL for termcap).
#define tb_termcap_init2              394  // secondary initialization string
#define tb_termcap_reset              395  // terminal reset string
#define tb_linefeed_if_not_lf         396  // use to move down
#define tb_backspace_if_not_bs        397  // move left, if not ^H
#define tb_other_non_function_keys    398  // list of self-mapped keycaps
#define tb_arrow_key_map              399  // map motion-keys for vi version 2
#define tb_acs_ulcorner               400  // single upper left
#define tb_acs_llcorner               401  // single lower left
#define tb_acs_urcorner               402  // single upper right
#define tb_acs_lrcorner               403  // single lower right
#define tb_acs_ltee                   404  // tee pointing right
#define tb_acs_rtee                   405  // tee pointing left
#define tb_acs_btee                   406  // tee pointing up
#define tb_acs_ttee                   407  // tee pointing down
#define tb_acs_hline                  408  // single horizontal line
#define tb_acs_vline                  409  // single vertical line
#define tb_acs_plus                   410  // single intersection
#define tb_memory_lock                411  // lock memory above cursor
#define tb_memory_unlock              412  // unlock memory
#define tb_box_chars_1                413  // box characters primary set
